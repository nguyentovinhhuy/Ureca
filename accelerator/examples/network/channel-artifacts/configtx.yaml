# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

################################################################################
#
#   Section: Organizations
#
#   - This section defines the different organizational identities which will
#   be referenced later in the configuration.
#
################################################################################
Organizations:

# SampleOrg defines an MSP using the sampleconfig.  It should never be used
# in production but may be used as a template for other definitions
- &OrdererOrg1
  # DefaultOrg defines the organization which is used in the sampleconfig
  # of the fabric.git development environment
  Name: ordererorg1

  # ID to load the MSP definition as
  ID: ordererorg1msp

  # MSPDir is the filesystem path which contains the MSP configuration
  MSPDir: ../crypto-config/ordererOrganizations/ordererorg1/msp

  # Policies defines the set of policies at this level of the config tree
  # For organization policies, their canonical path is usually
  #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
  Policies: &OrdererOrgPolicies
    Readers:
      Type: Signature
      Rule: "OR('ordererorg1msp.member')"
      # If your MSP is configured with the new NodeOUs, you might
      # want to use a more specific rule like the following:
      # Rule: "OR('OrdererMSP.admin', 'OrdererMSP.peer')"
    Writers:
      Type: Signature
      Rule: "OR('ordererorg1msp.member')"
      # If your MSP is configured with the new NodeOUs, you might
      # want to use a more specific rule like the following:
      # Rule: "OR('OrdererMSP.admin', 'OrdererMSP.client'')"
    Admins:
      Type: Signature
      Rule: "OR('ordererorg1msp.admin')"

- &Org1
  # DefaultOrg defines the organization which is used in the sampleconfig
  # of the fabric.git development environment
  Name: peerorg1msp

  # ID to load the MSP definition as
  ID: peerorg1msp

  MSPDir: ../crypto-config/peerOrganizations/peerorg1/msp

  # Policies defines the set of policies at this level of the config tree
  # For organization policies, their canonical path is usually
  #   /Channel/<Application|Orderer>/<OrgName>/<PolicyName>
  Policies: &Org1Policies
    Readers:
      Type: Signature
      Rule: "OR('peerorg1msp.member')"
      # If your MSP is configured with the new NodeOUs, you might
      # want to use a more specific rule like the following:
      # Rule: "OR('Org1MSP.admin', 'Org1MSP.peer')"
    Writers:
      Type: Signature
      Rule: "OR('peerorg1msp.member')"
      # If your MSP is configured with the new NodeOUs, you might
      # want to use a more specific rule like the following:
      # Rule: "OR('Org1MSP.admin', 'Org1MSP.client'')"
    Admins:
      Type: Signature
      Rule: "OR('peerorg1msp.admin')"

  AnchorPeers:
  # AnchorPeers defines the location of peers which can be used
  # for cross org gossip communication.  Note, this value is only
  # encoded in the genesis block in the Application section context
  - Host: peer1.peerorg1
    Port: 7051

Capabilities:
  Channel: &ChannelCapabilities
    V1_1: true
  Orderer: &OrdererCapabilities
    V1_1: true
  Application: &ApplicationCapabilities
    V1_2: true

Orderer: &OrdererDefaults

  # Orderer Type: The orderer implementation to start
  # Available types are "solo" and "kafka"
  OrdererType: solo

  Addresses:
  - orderer1.ordererorg1:7050

  # Batch Timeout: The amount of time to wait before creating a batch
  BatchTimeout: 1s

  # Batch Size: Controls the number of messages batched into a block
  BatchSize:

    # Max Message Count: The maximum number of messages to permit in a batch
    MaxMessageCount: 10

    # Absolute Max Bytes: The absolute maximum number of bytes allowed for
    # the serialized messages in a batch.
    AbsoluteMaxBytes: 98 MB

    # Preferred Max Bytes: The preferred maximum number of bytes allowed for
    # the serialized messages in a batch. A message larger than the preferred
    # max bytes will result in a batch larger than preferred max bytes.
    PreferredMaxBytes: 512 KB

  # Organizations is the list of orgs which are defined as participants on
  # the orderer side of the network
  Organizations:

  # Policies defines the set of policies at this level of the config tree
  # For Orderer policies, their canonical path is
  #   /Channel/Orderer/<PolicyName>
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"
    # BlockValidation specifies what signatures must be included in the block
    # from the orderer for the peer to validate it.
    BlockValidation:
      Type: ImplicitMeta
      Rule: "ANY Writers"

  Capabilities:
    <<: *OrdererCapabilities



################################################################################
#
#   SECTION: Application
#
#   - This section defines the values to encode into a config transaction or
#   genesis block for application related parameters
#
################################################################################
Application: &ApplicationDefaults
  ACLs: &ACLsDefault
    #This section provides defaults for policies for various resources
    #in the system. These "resources" could be functions on system chaincodes
    #(e.g., "GetBlockByNumber" on the "qscc" system chaincode) or other resources
    #(e.g.,who can receive Block events). This section does NOT specify the resource's
    #definition or API, but just the ACL policy for it.
    #
    #User's can override these defaults with their own policy mapping by defining the
    #mapping under ACLs in their channel-artifacts definition

    #---Lifecycle System Chaincode (lscc) function to policy mapping for access control---#

    # ACL policy for lscc's "getid" function
    lscc/ChaincodeExists: /Channel/Application/Readers

    # ACL policy for lscc's "getdepspec" function
    lscc/GetDeploymentSpec: /Channel/Application/Readers

    # ACL policy for lscc's "getccdata" function
    lscc/GetChaincodeData: /Channel/Application/Readers

    # ACL Policy for lscc's "getchaincodes" function
    lscc/GetInstantiatedChaincodes: /Channel/Application/Readers

    #---Query System Chaincode (qscc) function to policy mapping for access control---#

    # ACL policy for qscc's "GetChainInfo" function
    qscc/GetChainInfo: /Channel/Application/Readers

    # ACL policy for qscc's "GetBlockByNumber" function
    qscc/GetBlockByNumber: /Channel/Application/Readers

    # ACL policy for qscc's  "GetBlockByHash" function
    qscc/GetBlockByHash: /Channel/Application/Readers

    # ACL policy for qscc's "GetTransactionByID" function
    qscc/GetTransactionByID: /Channel/Application/Readers

    # ACL policy for qscc's "GetBlockByTxID" function
    qscc/GetBlockByTxID: /Channel/Application/Readers

    #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

    # ACL policy for cscc's "GetConfigBlock" function
    cscc/GetConfigBlock: /Channel/Application/Readers

    # ACL policy for cscc's "GetConfigTree" function
    cscc/GetConfigTree: /Channel/Application/Readers

    # ACL policy for cscc's "SimulateConfigTreeUpdate" function
    cscc/SimulateConfigTreeUpdate: /Channel/Application/Readers

    #---Miscellanesous peer function to policy mapping for access control---#

    # ACL policy for invoking chaincodes on peer
    peer/Propose: /Channel/Application/Writers

    # ACL policy for chaincode to chaincode invocation
    peer/ChaincodeToChaincode: /Channel/Application/Readers

    #---Events resource to policy mapping for access control###---#

    # ACL policy for sending block events
    event/Block: /Channel/Application/Readers

    # ACL policy for sending filtered block events
    event/FilteredBlock: /Channel/Application/Readers

    # Organizations is the list of orgs which are defined as participants on
    # the application side of the network
  Organizations:

  # Policies defines the set of policies at this level of the config tree
  # For Application policies, their canonical path is
  #   /Channel/Application/<PolicyName>
  Policies:
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"
    Org1MemberPolicy:
      Type: Signature
      Rule: "OR('peerorg1msp.member')"

  Capabilities:
    <<: *ApplicationCapabilities

################################################################################
#
#   CHANNEL
#
#   This section defines the values to encode into a config transaction or
#   genesis block for channel-artifacts related parameters.
#
################################################################################
Channel: &ChannelDefaults
  # Policies defines the set of policies at this level of the config tree
  # For Channel policies, their canonical path is
  #   /Channel/<PolicyName>
  Policies:
    # Who may invoke the 'Deliver' API
    Readers:
      Type: ImplicitMeta
      Rule: "ANY Readers"
    # Who may invoke the 'Broadcast' API
    Writers:
      Type: ImplicitMeta
      Rule: "ANY Writers"
    # By default, who may modify elements at this config level
    Admins:
      Type: ImplicitMeta
      Rule: "MAJORITY Admins"
  # Capabilities describes the channel-artifacts level capabilities, see the
  # dedicated Capabilities section elsewhere in this file for a full
  # description
  Capabilities:
    <<: *ChannelCapabilities

################################################################################
#
#   Profile
#
#   - Different configuration profiles may be encoded here to be specified
#   as parameters to the configtxgen tool
#
################################################################################
Profiles:

  genesis:
    <<: *ChannelDefaults
    Orderer:
      <<: *OrdererDefaults
      Organizations:
      - <<: *OrdererOrg1
        Policies:
          <<: *OrdererOrgPolicies
          Admins:
            Type: Signature
            Rule: "OR('ordererorg1msp.member')"
    Consortiums:
      Consortium000:
        Organizations:
        - <<: *Org1
          Policies:
            <<: *Org1Policies
            Admins:
              Type: Signature
              Rule: "OR('peerorg1msp.member')"

  accelerator:
    Consortium: Consortium000
    Application:
      <<: *ApplicationDefaults
      Organizations:
      - *Org1