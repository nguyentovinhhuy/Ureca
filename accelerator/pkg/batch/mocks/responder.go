/*
 *    Copyright 2019 Samsung SDS
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: route/responder.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	channel "github.com/hyperledger/fabric-sdk-go/pkg/client/channel"
	tx "github.com/nexledger/accelerator/pkg/batch/tx"
	reflect "reflect"
)

// MockResponder is a mock of Responder interface
type MockResponder struct {
	ctrl     *gomock.Controller
	recorder *MockResponderMockRecorder
}

// MockResponderMockRecorder is the mock recorder for MockResponder
type MockResponderMockRecorder struct {
	mock *MockResponder
}

// NewMockResponder creates a new mock instance
func NewMockResponder(ctrl *gomock.Controller) *MockResponder {
	mock := &MockResponder{ctrl: ctrl}
	mock.recorder = &MockResponderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponder) EXPECT() *MockResponderMockRecorder {
	return m.recorder
}

// JobSuccess mocks base method
func (m *MockResponder) JobSuccess(job *tx.Job, fabresp *channel.Response) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JobSuccess", job, fabresp)
}

// JobSuccess indicates an expected call of JobSuccess
func (mr *MockResponderMockRecorder) JobSuccess(job, fabresp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobSuccess", reflect.TypeOf((*MockResponder)(nil).JobSuccess), job, fabresp)
}

// JobFailure mocks base method
func (m *MockResponder) JobFailure(job *tx.Job, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JobFailure", job, err)
}

// JobFailure indicates an expected call of JobFailure
func (mr *MockResponderMockRecorder) JobFailure(job, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobFailure", reflect.TypeOf((*MockResponder)(nil).JobFailure), job, err)
}
